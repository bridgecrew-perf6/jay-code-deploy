<?php
 namespace Mgt\Varnish\Model\Plugin; use Zend\Uri\Uri; class PurgeCachePlugin extends \Magento\CacheInvalidate\Model\PurgeCache { const REQUEST_TIMEOUT = 5; protected $coreLogger; protected $logger; protected $varnishConfig; protected $urlCollection; protected $objectManager; protected static $tagsRegistry = []; public function __construct(\Magento\PageCache\Model\Cache\Server $cacheServer, \Magento\CacheInvalidate\Model\SocketFactory $socketAdapterFactory, \Mgt\Varnish\Model\Cache\Config $varnishConfig, \Mgt\Varnish\Model\ResourceModel\Url\Collection $urlCollection, \Magento\Framework\ObjectManagerInterface $objectManager, \Psr\Log\LoggerInterface $coreLogger, \Mgt\Varnish\Model\Logger\Logger $logger) { goto c5be6; Cf42d: $this->varnishConfig = $varnishConfig; goto Cea9e; De53d: $this->urlCollection = $urlCollection; goto f2e1f; f188f: $this->socketAdapterFactory = $socketAdapterFactory; goto Cf42d; c5be6: $this->cacheServer = $cacheServer; goto f188f; D420a: $this->logger = $logger; goto b5c5c; f2e1f: $this->coreLogger = $coreLogger; goto D420a; Cea9e: $this->objectManager = $objectManager; goto De53d; b5c5c: } public function sendPurgeRequest($tagsPattern) { goto D2451; F8fd0: foreach ($tags as $tag) { $tagsPattern[] = sprintf($pattern, $tag); C4948: } goto f13d7; A236c: d94bd: goto c8cb2; Bd0aa: E8bde: goto eab6b; a6e0b: $headers = [self::HEADER_X_MAGENTO_TAGS_PATTERN => $tagsPattern]; goto E5e7f; D0cb9: $logMessage = ''; goto b9ddc; D2451: $tags = []; goto D3e5b; E5e7f: $this->_sendPurgeRequest($headers); goto b6eaf; D8b90: if (!(true === $isCacheWarmerEnabled)) { goto E8bde; } goto e6f5a; eab6b: $this->logMessage($logMessage); goto Fa610; b86ea: return true; goto A236c; Ce60b: c638e: goto be768; c8cb2: $pattern = "\x28\x28\136\174\x2c\x29\45\x73\x28\x2c\174\x24\x29\x29"; goto D4d0b; e6f5a: $this->addToQueue($tags); goto Bd0aa; bdac9: goto bd160; goto f7283; b6eaf: $isCacheWarmerEnabled = $this->varnishConfig->isCacheWarmerEnabled(); goto D8b90; e7391: bd160: goto a6e0b; Dee68: $tagsPattern = implode("\x7c", array_unique($tagsPattern)); goto e7391; e726f: accdd: goto D6fa7; f7283: Dd46a: goto D7cc9; D4d0b: $tagsPattern = []; goto F8fd0; ac429: $logMessage = sprintf("\x56\x61\162\x6e\151\163\x68\x20\103\x61\143\x68\x65\40\160\x75\x72\x67\145\x64\40\142\x79\40\146\157\154\154\x6f\x77\x69\156\147\x20\164\141\x67\x73\x3a\x20\x25\x73", print_r($tags, true)); goto Dee68; Fa610: return true; goto D990d; be768: F5290: goto bdac9; D3e5b: if (true === is_array($tagsPattern)) { goto Dd46a; } goto D0cb9; D6fa7: if ($tags) { goto d94bd; } goto b86ea; b9ddc: switch ($tagsPattern) { case "\56\52": $logMessage = "\x54\x68\145\x20\167\x68\157\154\145\40\126\141\162\156\151\163\150\x20\x43\x61\143\150\x65\40\x68\x61\x73\x20\x62\x65\x65\x6e\x20\x70\x75\x72\147\145\x64"; goto F5290; } goto Ce60b; D7cc9: foreach ($tagsPattern as $tag) { goto fbaa7; a98d2: D2cf6: goto Fc1fd; Fd6ad: $tags[] = $tag; goto f43d3; fbaa7: if (isset(self::$tagsRegistry[$tag])) { goto D2cf6; } goto Fd6ad; f43d3: self::$tagsRegistry[$tag] = $tag; goto a98d2; Fc1fd: F373b: goto fc2cb; fc2cb: } goto e726f; f13d7: B2934: goto ac429; D990d: } public function addToQueue(array $tags) { goto ae3b6; d38f8: c0b3d: goto e16df; ae3b6: if (!count($tags)) { goto c0b3d; } goto E646d; E646d: try { goto F1fd5; cce8f: E2c32: goto e8284; f108c: $urlQueue->addToQueue($urls); goto dfca0; a0b4c: foreach ($this->urlCollection as $url) { $urls[] = ["\x73\164\157\x72\x65\x5f\151\144" => $url->getStoreId(), "\x70\x61\x74\x68" => $url->getPath(), "\160\162\x69\157\162\x69\164\171" => \Mgt\Varnish\Model\UrlQueue::PRIORITY_HIGH]; Ee35a: } goto cce8f; Fa3fc: $urlQueue = $this->objectManager->create("\115\x67\164\x5c\x56\x61\x72\156\151\163\x68\134\x4d\x6f\144\x65\154\134\x55\162\x6c\x51\165\145\165\x65"); goto f108c; F1fd5: $urls = []; goto De62a; dfca0: Bbab2: goto c86a6; e8284: if (!count($urls)) { goto Bbab2; } goto Fa3fc; De62a: $this->urlCollection->addTagsFilter($tags); goto a0b4c; c86a6: } catch (\Exception $e) { $errorMessage = sprintf("\x41\x6e\x20\145\162\162\157\x72\40\x6f\x63\143\165\x72\162\x65\144\40\144\x75\x72\x69\x6e\147\40\x61\144\144\151\156\x67\x20\164\157\40\x71\x75\145\165\145\54\40\x65\x72\x72\x6f\162\x20\x6d\x65\163\163\x61\x67\145\72\x20\x25\163", $e->getMessage()); $this->coreLogger->error($errorMessage); } goto d38f8; e16df: } public function purgeStoreRequest(\Magento\Store\Model\Store $store) { goto abefd; A0698: $logMessage = sprintf("\123\164\157\x72\x65\40\x77\151\x74\x68\40\x62\x61\163\x65\x20\x75\162\154\x3a\40\x25\163\x20\x28\x49\104\x3a\40\45\x73\51\x20\x68\141\x73\x20\142\145\x65\156\40\x70\x75\x72\147\x65\144", $store->getBaseUrl(), $store->getStoreId()); goto E14b3; b914b: $headers = ["\x48\x4f\123\x54" => $uri->getHost()]; goto C6d66; E14b3: $this->logMessage($logMessage); goto A7bc9; C6d66: $this->_sendPurgeRequest($headers); goto A0698; abefd: $uri = new Uri($store->getBaseUrl()); goto b914b; A7bc9: } public function purgeUrlRequest($url) { goto Cb66a; Cb66a: $uri = new Uri($url); goto bbe9d; dce0f: $this->_sendPurgeRequest($headers, $uri->getPath()); goto c2a69; bbe9d: $headers = ["\110\x4f\x53\124" => $uri->getHost()]; goto dce0f; Ca4e4: $this->logMessage($logMessage); goto e7155; c2a69: $logMessage = sprintf("\x55\162\154\72\x20\45\x73\x20\x68\141\163\x20\142\145\145\x6e\x20\160\x75\162\147\145\144", $url); goto Ca4e4; e7155: } protected function _sendPurgeRequest(array $headers, $path = null) { goto c16ee; F570d: e5ef2: goto c0ca5; c9ec5: $socketAdapter->setOptions(["\164\151\x6d\x65\x6f\165\x74" => self::REQUEST_TIMEOUT]); goto b92c2; c16ee: $socketAdapter = $this->socketAdapterFactory->create(); goto c9ec5; b92c2: $servers = $this->getCacheServers(); goto A57cf; A57cf: foreach ($servers as $server) { try { goto df0e8; ad9e5: $socketAdapter->connect($server->getHost(), $server->getPort()); goto B897e; C13ae: $socketAdapter->close(); goto A9d78; df0e8: if (!(null !== $path)) { goto Df8a2; } goto Ddc51; E4905: Df8a2: goto ad9e5; B897e: $socketAdapter->write("\x50\x55\122\x47\x45", $server, "\61\x2e\61", $headers); goto C13ae; Ddc51: $server->setPath($path); goto E4905; A9d78: } catch (\Exception $e) { goto c5c13; c5c13: $errorMessage = sprintf("\101\156\x20\x65\162\x72\157\x72\x20\x6f\x63\x63\x75\162\162\145\x64\40\144\x75\162\151\156\147\x20\160\x75\162\x67\x69\156\147\x2c\40\145\162\x72\x6f\x72\40\x6d\145\x73\163\141\147\145\x3a\40\42\x25\x73\42", $e->getMessage()); goto dc8bf; E773f: throw new \Exception($errorMessage); goto c8fdd; dc8bf: $this->logMessage($errorMessage, true); goto E773f; c8fdd: } cb54b: } goto F570d; c0ca5: } protected function logMessage($message, $force = false) { goto Fc703; cf93f: C9304: goto D7a24; c471c: $this->logger->debug($message); goto cf93f; Deca5: if (!(true === $isDebugModeEnabled || true === $force)) { goto C9304; } goto c471c; Fc703: $isDebugModeEnabled = $this->varnishConfig->isDebugModeEnabled(); goto Deca5; D7a24: } protected function getCacheServers() { goto C45c3; E34b7: foreach ($serverList as $server) { goto fb170; ec8cf: ec8c1: goto Aacbb; a3b1e: $uri->setScheme("\150\x74\x74\160"); goto eaac2; ee682: $uri->setPort($port); goto de97e; B3c45: $uri->setHost($host); goto ee682; b1f0a: $uri = new Uri(); goto B3c45; eaac2: $uri->setQuery(null); goto Ee60c; Ee60c: $cacheServers[] = $uri; goto ec8cf; de97e: $uri->setPath("\57"); goto a3b1e; fb170: list($host, $port) = explode("\72", $server); goto b1f0a; Aacbb: } goto Bcd9b; Bcd9b: b4c57: goto aed88; C45c3: $cacheServers = []; goto c0296; c0296: $serverList = $this->varnishConfig->getServerList(); goto E34b7; aed88: return $cacheServers; goto c1d0c; c1d0c: } }
