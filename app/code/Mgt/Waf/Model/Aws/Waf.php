<?php
 namespace Mgt\Waf\Model\Aws; use Aws\WAFV2\WAFV2Client as WafClient; use Aws\Credentials\Credentials; use Mgt\Waf\Model\Util\Retry; class Waf { const WEB_ACL_RULE_NAME_BLOCKED_COUNTRIES = "\102\154\x6f\x63\x6b\x2d\x43\157\165\x6e\164\x72\151\145\x73"; const WEB_ACL_RULE_NAME_RATE_LIMIT_IPV4 = "\x52\x61\x74\145\x2d\114\151\x6d\151\164\x2d\x49\x50\x76\x34"; const WEB_ACL_RULE_NAME_RATE_LIMIT_IPV6 = "\122\141\x74\145\x2d\x4c\151\155\x69\x74\x2d\x49\120\166\66"; const WEB_ACL_RULE_BLOCK_MAGENTO_BACKEND_ACCESS = "\x42\154\157\x63\x6b\x2d\115\141\x67\145\x6e\164\x6f\55\102\x61\143\153\145\x6e\144\x2d\x41\x63\143\145\163\x73"; const WEB_ACL_RULE_ALLOW_MAGENTO_BACKEND_ACCESS_IPV4 = "\x41\154\x6c\157\167\55\115\141\x67\145\156\x74\157\55\x42\x61\143\153\x65\x6e\144\x2d\x41\x63\143\145\x73\163\x2d\111\120\166\x34"; const WEB_ACL_RULE_ALLOW_MAGENTO_BACKEND_ACCESS_IPV6 = "\101\154\x6c\157\x77\x2d\115\141\147\145\156\x74\x6f\55\102\x61\x63\x6b\145\x6e\144\x2d\101\143\x63\x65\x73\x73\55\111\120\166\x36"; const IP_SET_BLOCKED_IPS_IPV4 = "\102\x6c\157\143\153\145\x64\55\111\x50\x73\55\111\120\x76\x34"; const IP_SET_BLOCKED_IPS_IPV6 = "\102\154\x6f\x63\x6b\x65\x64\55\x49\120\x73\55\x49\120\166\66"; const IP_SET_RATE_LIMIT_WHITELISTED_IPV4 = "\122\141\164\x65\55\114\151\x6d\x69\164\55\127\x68\x69\x74\x65\154\x69\x73\x74\x65\144\55\111\120\x76\64"; const IP_SET_RATE_LIMIT_WHITELISTED_IPV6 = "\122\141\164\145\55\114\151\155\x69\164\55\x57\150\x69\x74\145\x6c\151\x73\x74\145\x64\x2d\x49\x50\166\x36"; const IP_SET_MAGENTO_BACKEND_WHITELISTED_IPV4 = "\115\x61\147\145\156\164\x6f\x2d\x42\x61\x63\153\x65\x6e\x64\x2d\x57\150\x69\164\x65\x6c\x69\x73\164\145\144\55\x49\120\x76\x34"; const IP_SET_MAGENTO_BACKEND_WHITELISTED_IPV6 = "\x4d\141\147\145\x6e\164\157\55\x42\141\143\x6b\145\156\x64\x2d\127\x68\151\x74\145\154\151\163\x74\x65\144\x2d\111\120\166\66"; const REGEX_PATTERN_SET_BLOCKED_BOTS = "\x42\154\x6f\143\153\145\x64\55\102\x6f\x74\x73"; const SCOPE_REGIONAL = "\x52\105\107\x49\x4f\116\x41\x4c"; protected $awsAccessKey; protected $awsSecretAccessKey; protected $awsRegion; protected $projectName; protected $wafClient; protected $credentials; protected $webAcls = []; protected $webAclCache = []; protected $ipSets = []; protected $regexPatternSets = []; public function __construct($awsAccessKey, $awsSecretAccessKey, $awsRegion, $projectName) { goto B2b6a; A592b: $this->awsRegion = $awsRegion; goto Be319; F3028: $this->awsSecretAccessKey = $awsSecretAccessKey; goto A592b; Be319: $this->projectName = $projectName; goto B360b; B2b6a: $this->awsAccessKey = $awsAccessKey; goto F3028; B360b: } public function getWafClient() { goto a16e6; cc117: $credentials = new Credentials($this->awsAccessKey, $this->awsSecretAccessKey); goto Bae40; c50b5: return $this->wafClient; goto C0c23; A16c8: d0106: goto c50b5; Bae40: $this->wafClient = new WafClient(["\x76\145\162\163\151\x6f\156" => "\x6c\x61\164\145\163\164", "\162\145\x67\x69\x6f\x6e" => $this->awsRegion, "\143\162\x65\x64\145\156\x74\151\x61\154\163" => $credentials]); goto A16c8; a16e6: if (!(true === is_null($this->wafClient))) { goto d0106; } goto cc117; C0c23: } public function updateWebAcl(array $webAcl) { $wafClient = $this->getWafClient(); $this->retry(function () use($wafClient, $webAcl) { $webAcl["\x53\143\x6f\x70\x65"] = self::SCOPE_REGIONAL; $wafClient->updateWebACL($webAcl); }); } public function updateIpSet($ipSetName, array $ips) { goto A15db; D28b7: E71ff: goto b130c; F64a3: D8a09: goto c3c08; b130c: $ipSet = $this->getIpSet($ipSetName); goto afbf6; A15db: $ips = array_unique($ips); goto D6831; D6831: if (!(true === empty($ips))) { goto E71ff; } goto A15ec; b1654: Ce9e2: goto D28b7; A15ec: if ("\x76\x34" == substr($ipSetName, -2)) { goto D8a09; } goto c150e; c3c08: $ips = ["\65\x32\x2e\x32\70\x2e\x31\64\x39\56\61\x35\x37\57\63\62"]; goto b1654; c8518: $this->retry(function () use($wafClient, $ipSet, $ips) { goto F6f8e; D8448: $wafClient->updateIPSet(["\x49\x64" => $ipSetId, "\116\x61\x6d\145" => $ipSetName, "\x4c\x6f\143\153\x54\x6f\153\x65\156" => $ipSetLockToken, "\x44\145\x73\143\x72\151\160\164\151\157\x6e" => $ipSetDescription, "\101\144\x64\x72\x65\163\x73\145\x73" => $ips, "\123\x63\x6f\x70\145" => self::SCOPE_REGIONAL]); goto ace0b; F6f8e: $ipSetId = $ipSet["\x49\x64"] ?? ''; goto D83e0; c35dd: $ipSetLockToken = $ipSet["\x4c\157\143\153\124\157\x6b\145\156"] ?? ''; goto d9c81; d9c81: $ipSetDescription = $ipSet["\x44\145\163\143\x72\x69\x70\x74\151\157\156"] ?? ''; goto D8448; D83e0: $ipSetName = $ipSet["\116\141\155\145"] ?? ''; goto c35dd; ace0b: }); goto c7a44; eea29: goto Ce9e2; goto F64a3; c150e: $ips = ["\62\60\60\61\72\60\x64\142\70\x3a\x38\65\141\63\x3a\x30\60\60\x30\72\60\x30\60\x30\72\70\x61\x32\145\72\60\x33\x37\60\x3a\67\x33\63\64\x2f\x31\62\x38"]; goto eea29; afbf6: $wafClient = $this->getWafClient(); goto c8518; c7a44: } public function updateBlockedBotsRegexPatternSet(array $bots) { goto d2c2b; Affd6: $wafClient = $this->getWafClient(); goto D3075; D3075: $regexString = sprintf("\x28\x3f\151\x29\50\x25\163\51", implode("\x7c", $bots)); goto a3f36; a3f36: $this->retry(function () use($wafClient, $regexPatternSet, $regexString) { goto da30e; a2413: $regexPatternSetDescription = $regexPatternSet["\x44\145\x73\143\x72\151\160\164\x69\x6f\x6e"]; goto C9319; da30e: $regexPatternSetId = $regexPatternSet["\x49\144"]; goto Eaa0b; B35f3: $wafClient->updateRegexPatternSet(["\111\x64" => $regexPatternSetId, "\x4e\x61\155\145" => $regexPatternSetName, "\x44\145\163\143\162\x69\x70\x74\151\x6f\x6e" => $regexPatternSetDescription, "\x4c\x6f\143\153\124\x6f\153\145\156" => $regexPatternSetLockToken, "\x52\x65\x67\x75\154\141\x72\105\170\x70\x72\145\163\163\x69\157\x6e\x4c\151\x73\164" => [["\122\145\147\145\x78\x53\164\162\x69\x6e\x67" => $regexString]], "\x53\x63\x6f\x70\x65" => self::SCOPE_REGIONAL]); goto d3213; Eaa0b: $regexPatternSetName = $regexPatternSet["\116\141\x6d\x65"]; goto a2413; C9319: $regexPatternSetLockToken = $regexPatternSet["\114\x6f\143\x6b\124\157\153\x65\156"]; goto B35f3; d3213: }); goto b3a36; d2c2b: $regexPatternSet = $this->getRegexPatternSet(self::REGEX_PATTERN_SET_BLOCKED_BOTS); goto Affd6; b3a36: } public function getIpAddressesForIpSet($ipSetName) { goto df8f7; df8f7: $ipSet = $this->getIpSet($ipSetName); goto eb3d6; eb3d6: $ips = true === isset($ipSet["\x41\144\144\x72\x65\x73\x73\145\163"]) && false === empty($ipSet["\101\x64\144\162\x65\163\163\145\x73"]) ? $ipSet["\x41\x64\x64\x72\x65\x73\x73\x65\163"] : []; goto ffb8f; ffb8f: return $ips; goto d28c7; d28c7: } public function getBlockedBots() { goto aea4b; aea4b: $bots = []; goto E6303; dd4f2: aad05: goto D4410; D4410: return $bots; goto F7688; b2be1: if (!(true === isset($regexPatternSet["\x52\145\x67\x75\x6c\x61\162\105\x78\160\x72\145\163\x73\151\157\156\114\x69\163\164"][0]["\122\145\147\145\170\123\x74\162\x69\x6e\147"]))) { goto aad05; } goto e9a93; E6303: $regexPatternSet = $this->getRegexPatternSet(self::REGEX_PATTERN_SET_BLOCKED_BOTS); goto b2be1; Ab6c2: $bots = explode("\x7c", substr($regexString, 5, -1)); goto dd4f2; e9a93: $regexString = $regexPatternSet["\122\145\147\165\154\x61\x72\x45\x78\x70\162\145\x73\x73\x69\x6f\x6e\x4c\x69\163\x74"][0]["\122\145\147\145\170\123\x74\162\151\x6e\147"]; goto Ab6c2; F7688: } public function getWebAcls() { goto a1cb9; dbfc5: D4e07: goto Aede0; Cdb8d: foreach ($webAcls as $webAcl) { $this->webAcls[] = $webAcl; Bd952: } goto dbfc5; F7f86: $result = $this->retry(function () use($wafClient) { $result = $wafClient->listWebACLs(["\x53\x63\x6f\160\x65" => self::SCOPE_REGIONAL]); return $result; }); goto a2df0; A41ad: c0e73: goto D1e53; D1e53: return $this->webAcls; goto Bfeb3; a2df0: $webAcls = (array) $result->get("\127\x65\x62\x41\103\114\163"); goto C0bd6; C0bd6: if (!(false === empty($webAcls))) { goto ef068; } goto Cdb8d; a1cb9: if (!(true === empty($this->webAcls))) { goto c0e73; } goto D1a26; D1a26: $wafClient = $this->getWafClient(); goto F7f86; Aede0: ef068: goto A41ad; Bfeb3: } public function getWebAcl($webAclName) { goto c7f40; C758b: goto B0559; goto c9b92; c9b92: cd245: goto E10c9; bceba: throw new \Exception(sprintf("\127\x65\x62\40\x41\103\x4c\40\42\x25\x73\42\x2e\x20\156\157\164\x20\x66\x6f\x75\156\144", $webAclName)); goto db367; a0659: $webAcls = $this->getWebAcls(); goto fc37d; fc37d: if (!(false === empty($webAcls))) { goto a2db8; } goto C6a07; Dcfeb: B0559: goto bceba; c7f40: if (true === isset($this->webAclCache[$webAclName])) { goto cd245; } goto a0659; F5c49: a2db8: goto C758b; C6a07: foreach ($webAcls as $webAcl) { goto d1f5a; E91d5: $webAcl = (array) $result->get("\x57\145\x62\101\x43\x4c"); goto Bc6ba; D96a3: cb2af: goto f1d86; f3da8: $result = $this->retry(function () use($wafClient, $webAcl) { goto Ab786; F76e4: return $result; goto C4539; D9233: $result = $wafClient->getWebACL(["\x49\144" => $webAclId, "\116\x61\x6d\145" => $webAclName, "\123\143\x6f\160\145" => self::SCOPE_REGIONAL]); goto F76e4; d4b5a: $webAclName = $webAcl["\x4e\141\x6d\145"] ?? ''; goto D9233; Ab786: $webAclId = $webAcl["\x49\144"] ?? ''; goto d4b5a; C4539: }); goto a586b; A0593: a8839: goto D96a3; f2d68: $wafClient = $this->getWafClient(); goto f3da8; Bc6ba: $webAcl["\x4c\x6f\143\x6b\x54\157\x6b\x65\x6e"] = $webAclLockToken; goto B8b80; d1f5a: if (!(true === isset($webAcl["\x4e\x61\x6d\145"]) && $webAclName == $webAcl["\116\x61\155\x65"])) { goto a8839; } goto f2d68; Eaba9: return $this->webAclCache[$webAclName]; goto A0593; a586b: $webAclLockToken = $webAcl["\114\157\x63\x6b\124\x6f\x6b\145\156"] ?? ''; goto E91d5; B8b80: $this->webAclCache[$webAclName] = $webAcl; goto Eaba9; f1d86: } goto c9eda; c9eda: e8501: goto F5c49; E10c9: return $this->webAclCache[$webAclName]; goto Dcfeb; db367: } protected function getIpSets() { goto D1e18; c28e5: e9d77: goto bf44a; D1e18: $wafClient = $this->getWafClient(); goto f4eda; f23b4: if (!(false === empty($ipSets))) { goto e9d77; } goto d138e; f69eb: $ipSets = (array) $result->get("\x49\x50\x53\145\x74\x73"); goto f23b4; d138e: $this->ipSets = $ipSets; goto c28e5; f4eda: $result = $this->retry(function () use($wafClient) { $result = $wafClient->listIPSets(["\123\143\157\160\145" => self::SCOPE_REGIONAL]); return $result; }); goto f69eb; bf44a: return $this->ipSets; goto Fe315; Fe315: } protected function getIpSet($ipSetName) { goto F1678; d25e7: foreach ($ipSets as $wafIpSet) { goto B6c09; d995f: $wafIpSetName = $wafIpSet["\116\141\155\145"] ?? ''; goto B1e01; b3aaa: $wafClient = $this->getWafClient(); goto b7f0c; B1e01: $wafIpSetLockToken = $wafIpSet["\x4c\157\x63\x6b\x54\157\153\x65\156"] ?? ''; goto A2d80; b7f0c: $result = $this->retry(function () use($wafClient, $wafIpSetId, $wafIpSetName) { $result = $wafClient->getIPSet(["\x49\x64" => $wafIpSetId, "\116\x61\x6d\x65" => $wafIpSetName, "\123\x63\x6f\x70\x65" => self::SCOPE_REGIONAL]); return $result; }); goto aa157; a4643: goto C9d90; goto d0fd7; aa157: $wafIpSet = (array) $result->get("\111\120\123\145\x74"); goto d32f3; d32f3: if (!(false === empty($wafIpSet))) { goto C58af; } goto fe2ae; d0fd7: b3ca2: goto Fc58d; A2d80: if (!(false === empty($wafIpSetName) && $wafIpSetName == $ipSetName)) { goto b3ca2; } goto b3aaa; B4112: C58af: goto a4643; fe2ae: $wafIpSet["\114\x6f\143\153\124\x6f\x6b\x65\x6e"] = $wafIpSetLockToken; goto C301a; c2207: return $ipSet; goto B4112; B6c09: $wafIpSetId = $wafIpSet["\x49\144"] ?? ''; goto d995f; C301a: $ipSet = $wafIpSet; goto c2207; Fc58d: f434e: goto ccc86; ccc86: } goto Bb2c1; d7ad8: throw new \Exception(sprintf("\x49\x50\40\x53\x65\x74\40\x22\x25\x73\x22\40\x6e\x6f\x74\x20\x66\157\x75\x6e\144\56", $ipSetName)); goto A6621; bbbe7: $ipSetName = $this->getIpSetName($ipSetName); goto Dcfcd; Bb2c1: C9d90: goto d7ad8; F1678: $ipSet = null; goto bbbe7; Dcfcd: $ipSets = $this->getIpSets(); goto d25e7; A6621: } protected function getRegexPatternSet($name) { goto f1383; f208f: foreach ($regexPatternSets as $regexPatternSet) { goto a64c7; d7826: $data = $result->get("\122\145\x67\145\x78\120\141\x74\x74\x65\162\x6e\x53\145\164"); goto Fb64a; D4b23: if (!(false === empty($regexPatternSetName) && $regexPatternSetName == $name)) { goto C2790; } goto df55b; ec296: f4ba7: goto D214e; D214e: return $regexPatternSet; goto bc87d; F9126: if (!(true === isset($data["\114\x6f\143\x6b\x54\157\x6b\x65\156"]))) { goto f4ba7; } goto Fa508; a5b71: $result = $this->retry(function () use($wafClient, $regexPatternSet) { goto E154b; A42a3: $result = $wafClient->getRegexPatternSet(["\x49\144" => $regexPatternSetId, "\x4e\x61\x6d\x65" => $regexPatternSetName, "\x53\x63\x6f\x70\145" => self::SCOPE_REGIONAL]); goto b66cc; B595a: $regexPatternSetName = $regexPatternSet["\116\x61\x6d\145"] ?? ''; goto A42a3; E154b: $regexPatternSetId = $regexPatternSet["\x49\x64"] ?? ''; goto B595a; b66cc: return $result; goto ca7fb; ca7fb: }); goto d7826; C5586: $regexPatternSet["\x52\x65\147\x75\154\x61\162\x45\170\160\x72\145\163\163\x69\157\x6e\x4c\151\x73\164"] = $data["\x52\x65\x67\x75\154\x61\162\x45\170\160\x72\145\x73\163\151\x6f\x6e\114\x69\x73\164"]; goto Cc995; bc87d: goto dad53; goto Cba46; Cba46: C2790: goto D7065; Fa508: $regexPatternSet["\x4c\157\143\x6b\124\157\x6b\145\156"] = $data["\114\x6f\x63\153\x54\x6f\x6b\145\156"]; goto ec296; Cc995: Cbcf4: goto F9126; a64c7: $regexPatternSetName = $regexPatternSet["\x4e\x61\x6d\145"] ?? ''; goto D4b23; D7065: C4132: goto f20fa; Fb64a: if (!(true === isset($data["\x52\145\x67\165\154\x61\162\105\170\x70\162\x65\x73\x73\151\x6f\156\x4c\x69\163\x74"]))) { goto Cbcf4; } goto C5586; df55b: $wafClient = $this->getWafClient(); goto a5b71; f20fa: } goto c4e0e; B8442: if (!(false === empty($regexPatternSets))) { goto fb68f; } goto f208f; ec011: throw new \Exception(sprintf("\x52\x65\x67\x65\x78\x20\120\141\x74\164\145\x72\156\x20\123\x65\164\x20\x22\x25\x73\42\x20\x6e\x6f\x74\x20\146\157\x75\x6e\x64", $name)); goto Ee5ea; c4e0e: dad53: goto b0868; b0868: fb68f: goto ec011; b8b61: $regexPatternSets = $this->getRegexPatternSets(); goto B8442; f1383: $name = $this->getRegexPatternSetName($name); goto b8b61; Ee5ea: } protected function getRegexPatternSets() { goto a9581; Dc5c9: $this->regexPatternSets = $regexPatternSets; goto e31ab; F8497: $regexPatternSets = (array) $result->get("\x52\x65\x67\145\170\120\x61\164\164\145\x72\x6e\x53\145\164\163"); goto Edeb0; a9581: $wafClient = $this->getWafClient(); goto c6d3a; e31ab: f4426: goto C2756; C2756: return $this->regexPatternSets; goto c42de; c6d3a: $result = $this->retry(function () use($wafClient) { $result = $wafClient->listRegexPatternSets(["\123\x63\x6f\x70\x65" => self::SCOPE_REGIONAL]); return $result; }); goto F8497; Edeb0: if (!(false === empty($regexPatternSets))) { goto f4426; } goto Dc5c9; c42de: } protected function getRegexPatternSetName($regexPatternSetName) { goto b61cd; b93fd: return $regexPatternSetName; goto Ee9eb; efbb1: $regexPatternSetName = sprintf("\45\x73\55\115\107\x54\55\x25\163", $projectName, $regexPatternSetName); goto b93fd; b61cd: $projectName = ucfirst($this->getProjectName()); goto efbb1; Ee9eb: } public function getBlockedCountryCodes($webAclName) { goto Db6d3; F2829: $blockedCountryCodes = $webAclRule["\x53\164\x61\164\x65\155\x65\x6e\x74"]["\107\145\x6f\x4d\x61\x74\x63\x68\123\164\141\x74\x65\155\145\x6e\x74"]["\103\x6f\165\x6e\x74\162\x79\103\157\144\x65\163"]; goto d39eb; f7e6d: $webAcl = $this->getWebAcl($webAclName); goto ea550; d39eb: d3efe: goto E06d4; ea550: $webAclRule = $this->getWebAclRule($webAcl, self::WEB_ACL_RULE_NAME_BLOCKED_COUNTRIES); goto F23d2; E06d4: return $blockedCountryCodes; goto dfc43; F23d2: if (!(true === isset($webAclRule["\x53\164\141\164\145\x6d\x65\x6e\164"]["\x47\145\157\x4d\x61\x74\x63\x68\x53\164\x61\x74\x65\155\145\156\164"]["\103\x6f\165\x6e\164\162\x79\x43\157\x64\x65\x73"]) && false === empty($webAclRule["\x53\164\x61\164\145\x6d\x65\156\x74"]["\107\x65\x6f\x4d\x61\x74\x63\x68\123\164\141\164\145\x6d\145\x6e\164"]["\x43\157\165\156\164\x72\171\103\x6f\144\145\163"]))) { goto d3efe; } goto F2829; Db6d3: $blockedCountryCodes = []; goto f7e6d; dfc43: } public function getWebAclRule(array $webAcl, $webAclRuleName) { goto Dbe1f; Dab5d: if (false === $webAclRuleFound) { goto be451; } goto dd5f4; Eecce: foreach ($webAclRules as $webAclRule) { goto C9b5a; B19d7: cad6f: goto e147e; E2113: Fc87a: goto B19d7; a37ff: goto b7a4a; goto E2113; e9b8c: $webAclRuleFound = true; goto a37ff; C9b5a: if (!(true === isset($webAclRule["\x4e\x61\x6d\x65"]) && $webAclRule["\116\141\155\145"] == $webAclRuleName)) { goto Fc87a; } goto e9b8c; e147e: } goto ff687; ff687: b7a4a: goto f3171; Ff4a0: $webAclRule = null; goto cb18a; Dbe1f: $webAclRuleName = $this->getWebAclRuleName($webAclRuleName); goto Bbff8; bea9f: if (!(false === empty($webAclRules))) { goto def97; } goto Eecce; f3171: def97: goto Dab5d; dd5f4: return $webAclRule; goto D9fe4; e4119: throw new \Exception(sprintf("\x57\x65\142\x20\x41\x43\114\40\x52\165\x6c\x65\40\x22\x25\x73\x22\40\156\157\x74\x20\x66\157\x75\x6e\144\56", $webAclRuleName)); goto af397; af397: E082f: goto Cf7b5; D9fe4: goto E082f; goto A883b; Bbff8: $webAclRuleFound = false; goto Ff4a0; A883b: be451: goto e4119; cb18a: $webAclRules = $webAcl["\122\165\154\145\163"] ?? []; goto bea9f; Cf7b5: } public function getRateLimit($webAclName) { goto e3eac; cc072: $webbAclRuleName = $this->getWebAclRuleName(self::WEB_ACL_RULE_NAME_RATE_LIMIT_IPV4); goto Cbea3; Fc505: C762c: goto a6a7c; cd34b: C808e: goto a40f8; Cbea3: $webAclRule = $this->getWebAclRule($webAcl, self::WEB_ACL_RULE_NAME_RATE_LIMIT_IPV4); goto cd1cb; e3eac: $webAcl = $this->getWebAcl($webAclName); goto f29a7; Dce2e: E0a67: goto cc072; D5f51: goto C762c; goto Dce2e; Fda22: goto Fb764; goto cd34b; E7cca: throw new \Exception(sprintf("\125\156\141\142\154\145\40\x74\x6f\x20\147\145\164\x20\127\x65\142\x20\101\103\114\40\x22\x25\163\42\56", $webAclName)); goto D5f51; ff13c: return $rateLimit; goto Eca8e; cd1cb: if (false === is_null($webAclRule)) { goto C808e; } goto A6b41; Eca8e: Fb764: goto Fc505; a40f8: $rateLimit = $webAclRule["\123\164\x61\x74\x65\155\x65\x6e\164"]["\122\141\164\145\102\141\163\145\144\123\164\141\164\x65\x6d\145\x6e\x74"]["\114\151\155\x69\x74"] ?? ''; goto ff13c; A6b41: throw new \Exception(sprintf("\127\145\142\40\x41\x43\114\x20\122\x75\154\145\40\42\45\x73\42\40\156\x6f\164\x20\146\x6f\x75\x6e\144\56", $webbAclRuleName)); goto Fda22; f29a7: if (false === is_null($webAcl)) { goto E0a67; } goto E7cca; a6a7c: } public function getWebAclRuleName($webAclRuleName) { goto b45a0; e5c09: return $webAclRuleName; goto cc8cd; b45a0: $projectName = ucfirst($this->getProjectName()); goto afd74; afd74: $webAclRuleName = sprintf("\45\x73\55\115\107\x54\x2d\45\x73", $projectName, $webAclRuleName); goto e5c09; cc8cd: } public function getIpSetName($ipSetName) { goto Dff42; D9c34: $ipSetName = sprintf("\45\x73\55\115\x47\124\55\45\x73", $projectName, $ipSetName); goto bf8e0; bf8e0: return $ipSetName; goto da43c; Dff42: $projectName = ucfirst($this->getProjectName()); goto D9c34; da43c: } protected function getProjectName() { return $this->projectName; } protected function retry(callable $fn, $retries = 2, $delay = 15) { return Retry::retry($fn, $retries, $delay); } }
